Here are some notes about lcserver - the LabControl server implementation.

This server is a CGI script that provides a place to store,
administer and control objects.

Current objects supported are:
 * boards
 * resources
   * power-controller
   * network-server
   * serial
 * users
 * requests
   * test (put-request?)

== programatic interface ==
[*** Work in Progress ***]
Note: This work started as a clone of fserver, which uses a non-json
web API.  Converting this over to the BFC REST API is in progress.
Please pardon the confusion while this is under development.

The server handles requests from lc to put, update, query, get, and remove
objects, via it's web API.

The server also handles a REST api which can be used to perform operations
on boards and resources in the farm.

[TEMPORARY]
Eventually, the intent is to migrate the server to use only a single
json-based API, but right now it supports both a text and a json
API (for different operations).

== user interface ==
The server handles showing a user interface to examine the objects on
the server.

It can show lists of objects, and the content of individual objects.

Work has just started on the conversion from text API to REST API.

Files:
 lcserver.py - the LabControl server
 test-server.py - a python web server (supports CGI) for testing purposes
 start_server - a shell script to start the test server
 make-otp-file - script used to create a one-time-pad file
   (which is used for authenticating operations from labs)

Data Files:
 The 'lc-data' directory hierarchy has single files (usually json) that are
 used to represent objects, including boards, resources, and requests
  * boards - board-{name}.json files
  * resources - resource-{name}.json files
  * requests - request-{name-timestamp}.json files
  * logs - log-{name-timestamp}.txt files


