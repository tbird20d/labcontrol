Here are some notes about xterm support for the DUT

== To Do items for DUT xterm web UI ==
 - handle ttyd instance lifecycle
   - call stop_webterm on:
     - clear_reservation()
     - close_terminal()
       - add link to web_terminal interface for "close terminal and return to
         board page"
       - this should just call stop_webterm(), and then call show_board()

 - add Apache proxy config, to use path instead of proxy
   - see proxy notes below

 - add flexibility to ttyd invocation
   - get ttyd command string from lcserver.conf file

 - make sure user has board allocated before granting access to webterm
   page for board
   - check rights in show_web_terminal()
   - hard: add per-user authentication to ttyd

 - find a way to use path element instead of port to distinguish
   terminals
   - maybe ttyd supports multiple terminals at the same time?

 - experiment with ttyd options to provide different terminal settings

== things already implemented ==
 + install ttyd on host where labcontrol runs
 + create flow for "webterm" interface
   + have show_board() add link to "webterm/bbb" if board.json has 'login_cmd'
   + handle "webterm" object type, in do_show()
   + add show_web_terminal, with iframe for bbb web terminal
 + keep ttyd pid and port in a new data file - lc-data/proc-data.json
   + proc_data.json attributes:
      'pid' - process id, if it's running, as a number
      'port' - port where this instance of ttyd is running
   + the port is used to construct the url used to access this ttyd
     instance on this machine
   + the pid is used to terminate the service, on stop_webterm
 + create routines:
    + start_webterm(req, board)
    + stop_webterm(req, board)
 + start_webterm outline:
   + detect if already running
   + use login_cmd from board data
   + use hardcoded ttyd execution string (from /usr/local/bin)
   + execute ttd command using start_command()
     + execute ttyd, and get pid
     + save pid in proc-data file
   + call start_webterm from show_web_terminal

== ttyd ==
(this is the preferred system)
Obtained from https://github.com/tsl0922/ttyd

default port is 7681

 $ ttyd -p %(port)s bash
shows a terminal using bash, on the host machine, as the user that ran ttyd

 $ ttyd -p %(port)s %(login_cmd)

where login_cmd comes from board-bbb.json, and has the value:
sshpass -p %(password)s ssh -q -o UserKnownHostsFile=/dev/null -o "StrictHostKeyChecking no" -x %(user)s@%(ip_addr)s


== Apache proxy for ttyd ==
Configure apache to rewrite the ttyd sessions, and proxy the URLS
for ttyd so that the user can access the ttyd session through the
labcontrol server.

This was how ebf did it:

1. Run below set of commands for enabling Apache modules
(if not already done)

 $ a2enmod rewrite
 $ a2enmod proxy
 $ a2enmod proxy_http
 $ a2enmod proxy_wstunnel
 $ a2enmod headers
 $ a2enmod expires

2. Edit Apache {site}.conf settings file which resides
in /etc/apache2/sites-available/ directory


under the VirtualHost section (<VirtualHost *:80> OR <VirtualHost *:443>)
add the following rewrite rules

    RewriteEngine On

    RewriteCond %{HTTP:Upgrade} websocket [NC]
    RewriteRule ^/webterm/(.*) ws://127.0.0.1:$1 [P,L]
    RewriteRule ^/webterm/(.*) http://127.0.0.1:$1 [P]

3. Restart Apache service

 $ sudo systemctl restart apache2

Above settings would allow ttyd instance running on
http://127.0.0.1:XXXX port to be accessible through the Apache
instance running over standard 80 port on URL
http://127.0.0.1/webterm/XXXX.

Where  XXXX  could be any port running ttyd.

-----------------
Here is some analysis:
  - about 'RewriteCond %{HTTP:Upgrade} websocket [NC]'
    - '%{HTTP:Upgrade}' is the Test String
       - 'websocket' is the Condition pattern
       - '[NC]' is the flags
       - if the HTTP header "Upgrade" matches 'websocket', then
         activate the following rules
       - [NC] meeans 'no case', which makes the test case-insensitive
         (for both the test string and the condition pattern)
   - about 'RewriteRule  ^/webterm/(.*) ws://127.0.0.1:$1 [P,L]'
       - '^/webterm/(.*)' is the Pattern
       - 'ws://127.0.0.1:$1' is the Substitution
       - '[P,L]' are the flags
       - if the URL path starts with '/webterm/', convert it to a
         websocket URL to the local host, using the remaining path element
         as the port
       - P flag indicates to send the substitution URL as a proxy request
       - L flag indicates stop processing immediately (don't apply more rules)
   - about 'RewriteRule  ^/webterm/(.*) http://127.0.0.1:$1 [P]'
       - '^/console/(.*)' is the Pattern
       - 'http://127.0.0.1:$1' is the Substitution
       - '[P]' is the flags
       - if the URL path starts with '/webterm/', convert it to a
         http URL to the local host, using the remaining path element
         as the port
       - P flag indicates to send the substitution URL as a proxy request



== pyxtermjs ==
(not used)
See ~/work/pyxtermjs/pyxtermjs

 - run with 'cd ~/work/pyxtermjs ; ./pyxtermjs'
 - access with: 'browser http://localhost:5000/'

This sample uses flask, and socket.io

I'll need async socket data transfer in order for this to work
for my needs.

It uses xterm.js javascript library from: unpkg.com
It uses ajav/libs/socket.io library from cloudflare.com

The actual flask app is in pyxtermjs/app.py (and it's very short)

== BFC terminal ==
What is bfc using?
 - on bfc server: https://bfc.timesys.com/scheduler/console/raspi4_gpio
   page has an iframe pointing to:
   - https://bfc.timesys.com/console/4349
   - with a title of 'sshpass -p zuser ssh -t zuser@172.16.99.25 ...'
 - they are using ttyd: https://github.com/tsl0922/ttyd

